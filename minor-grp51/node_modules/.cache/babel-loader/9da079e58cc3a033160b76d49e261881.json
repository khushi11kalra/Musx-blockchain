{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nexports.EthereumDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // truffle has started expecting gas used/limit to be\n      // hex strings to support bignumbers for other ledgers\n      overrides.getBlock(web3);\n      overrides.getTransaction(web3);\n      overrides.getTransactionReceipt(web3);\n    });\n  }\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  \"getBlock\": web3 => {\n    // @ts-ignore\n    const _oldFormatter = web3.eth.getBlock.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getBlock.method.outputFormatter = block => {\n      // @ts-ignore\n      let result = _oldFormatter.call(web3.eth.getBlock.method, block);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  },\n  \"getTransaction\": web3 => {\n    const _oldTransactionFormatter =\n    // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter = tx => {\n      let result = _oldTransactionFormatter.call(\n      // @ts-ignore\n      web3.eth.getTransaction.method, tx);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n      return result;\n    };\n  },\n  \"getTransactionReceipt\": web3 => {\n    const _oldTransactionReceiptFormatter =\n    // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n      let result = _oldTransactionReceiptFormatter.call(\n      // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  }\n};","map":{"version":3,"names":["bn_js_1","__importDefault","require","exports","EthereumDefinition","initNetworkType","web3","overrides","getBlock","getTransaction","getTransactionReceipt","_oldFormatter","eth","method","outputFormatter","block","result","call","gasLimit","default","toString","gasUsed","_oldTransactionFormatter","tx","gas","_oldTransactionReceiptFormatter","receipt"],"sources":["../lib/ethereum-overloads.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAGaC,OAAA,CAAAC,kBAAkB,GAAG;EAC1BC,eAAeA,CAAEC,IAAc;;MACnC;MACA;MACAC,SAAS,CAACC,QAAQ,CAACF,IAAI,CAAC;MACxBC,SAAS,CAACE,cAAc,CAACH,IAAI,CAAC;MAC9BC,SAAS,CAACG,qBAAqB,CAACJ,IAAI,CAAC;IACvC,CAAC;;CACF;AAED,MAAMC,SAAS,GAAG;EAClB;EACA;EACA;EACE,UAAU,EAAGD,IAAc,IAAI;IAC/B;IACA,MAAMK,aAAa,GAAGL,IAAI,CAACM,GAAG,CAACJ,QAAQ,CAACK,MAAM,CAACC,eAAe;IAE9D;IACAR,IAAI,CAACM,GAAG,CAACJ,QAAQ,CAACK,MAAM,CAACC,eAAe,GAAGC,KAAK,IAAG;MACjD;MACA,IAAIC,MAAM,GAAGL,aAAa,CAACM,IAAI,CAACX,IAAI,CAACM,GAAG,CAACJ,QAAQ,CAACK,MAAM,EAAEE,KAAK,CAAC;MAEhE;MACA;MACAC,MAAM,CAACE,QAAQ,GAAG,IAAI,GAAG,IAAIlB,OAAA,CAAAmB,OAAE,CAACH,MAAM,CAACE,QAAQ,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;MAC7DJ,MAAM,CAACK,OAAO,GAAG,IAAI,GAAG,IAAIrB,OAAA,CAAAmB,OAAE,CAACH,MAAM,CAACK,OAAO,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC;MAE3D,OAAOJ,MAAM;IACf,CAAC;EACD,CAAC;EAED,gBAAgB,EAAGV,IAAc,IAAI;IACrC,MAAMgB,wBAAwB;IAC5B;IACAhB,IAAI,CAACM,GAAG,CAACH,cAAc,CAACI,MAAM,CAACC,eAAe;IAEhD;IACAR,IAAI,CAACM,GAAG,CAACH,cAAc,CAACI,MAAM,CAACC,eAAe,GAAGS,EAAE,IAAG;MACpD,IAAIP,MAAM,GAAGM,wBAAwB,CAACL,IAAI;MACxC;MACAX,IAAI,CAACM,GAAG,CAACH,cAAc,CAACI,MAAM,EAC9BU,EAAE,CACH;MAED;MACA;MACAP,MAAM,CAACQ,GAAG,GAAG,IAAI,GAAG,IAAIxB,OAAA,CAAAmB,OAAE,CAACH,MAAM,CAACQ,GAAG,CAAC,CAACJ,QAAQ,CAAC,EAAE,CAAC;MAEnD,OAAOJ,MAAM;IACf,CAAC;EAED,CAAC;EAED,uBAAuB,EAAGV,IAAc,IAAI;IAC1C,MAAMmB,+BAA+B;IACrC;IACAnB,IAAI,CAACM,GAAG,CAACF,qBAAqB,CAACG,MAAM,CAACC,eAAe;IAEvD;IACAR,IAAI,CAACM,GAAG,CAACF,qBAAqB,CAACG,MAAM,CAACC,eAAe,GAAGY,OAAO,IAAG;MAChE,IAAIV,MAAM,GAAGS,+BAA+B,CAACR,IAAI;MAC/C;MACAX,IAAI,CAACM,GAAG,CAACF,qBAAqB,CAACG,MAAM,EACrCa,OAAO,CACR;MAED;MACA;MACAV,MAAM,CAACK,OAAO,GAAG,IAAI,GAAG,IAAIrB,OAAA,CAAAmB,OAAE,CAACH,MAAM,CAACK,OAAO,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC;MAE3D,OAAOJ,MAAM;IACf,CAAC;EACD;CACD"},"metadata":{},"sourceType":"script"}