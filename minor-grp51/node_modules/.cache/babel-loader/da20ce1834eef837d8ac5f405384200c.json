{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nconst createFindPeer = configure.configure(api => {\n  async function findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const data of res.ndjson()) {\n      if (data.Type === responseTypes.FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n        };\n      }\n    }\n    throw new Error('not found');\n  }\n  return findPeer;\n});\nexports.createFindPeer = createFindPeer;","map":{"version":3,"names":["Object","defineProperty","exports","value","multiaddr","require","configure","toUrlSearchParams","responseTypes","createFindPeer","api","findPeer","peerId","options","arguments","length","undefined","res","post","signal","searchParams","arg","headers","data","ndjson","Type","FinalPeer","Responses","ID","Addrs","id","addrs","map","a","Multiaddr","Error"],"sources":["C:/Users/khushi kalra/Desktop/5th semester projects/Minor1/minor/blockstudio/App/minor-grp51/node_modules/ipfs-http-client/cjs/src/dht/find-peer.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\n\nconst createFindPeer = configure.configure(api => {\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const data of res.ndjson()) {\n      if (data.Type === responseTypes.FinalPeer && data.Responses) {\n        const {ID, Addrs} = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n        };\n      }\n    }\n    throw new Error('not found');\n  }\n  return findPeer;\n});\n\nexports.createFindPeer = createFindPeer;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACjE,IAAIG,aAAa,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAElD,MAAMI,cAAc,GAAGH,SAAS,CAACA,SAAS,CAACI,GAAG,IAAI;EAChD,eAAeC,QAAQA,CAACC,MAAM,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC1C,MAAMG,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,cAAc,EAAE;MACzCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEb,iBAAiB,CAACA,iBAAiB,CAAC;QAChDc,GAAG,EAAET,MAAM;QACX,GAAGC;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,WAAW,MAAMC,IAAI,IAAIN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE;MACrC,IAAID,IAAI,CAACE,IAAI,KAAKjB,aAAa,CAACkB,SAAS,IAAIH,IAAI,CAACI,SAAS,EAAE;QAC3D,MAAM;UAACC,EAAE;UAAEC;QAAK,CAAC,GAAGN,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC;QACrC,OAAO;UACLG,EAAE,EAAEF,EAAE;UACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEG,GAAG,CAACC,CAAC,IAAI,IAAI7B,SAAS,CAAC8B,SAAS,CAACD,CAAC,CAAC;QAC1D,CAAC;MACH;IACF;IACA,MAAM,IAAIE,KAAK,CAAC,WAAW,CAAC;EAC9B;EACA,OAAOxB,QAAQ;AACjB,CAAC,CAAC;AAEFT,OAAO,CAACO,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script"}