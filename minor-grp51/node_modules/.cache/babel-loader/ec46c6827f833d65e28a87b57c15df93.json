{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nconst createFindProvs = configure.configure(api => {\n  function findProvs(cid) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        const res = await api.post('dht/findprovs', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams.toUrlSearchParams({\n            arg: cid.toString(),\n            ...options\n          }),\n          headers: options.headers\n        });\n        for await (const message of res.ndjson()) {\n          if (message.Type === responseTypes.Provider && message.Responses) {\n            for (const {\n              ID,\n              Addrs\n            } of message.Responses) {\n              yield {\n                id: ID,\n                addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n              };\n            }\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return findProvs;\n});\nexports.createFindProvs = createFindProvs;","map":{"version":3,"names":["Object","defineProperty","exports","value","multiaddr","require","configure","toUrlSearchParams","responseTypes","createFindProvs","api","findProvs","cid","options","arguments","length","undefined","res","post","signal","searchParams","arg","toString","headers","message","ndjson","Type","Provider","Responses","ID","Addrs","id","addrs","map","a","Multiaddr","e","Promise","reject"],"sources":["C:/Users/khushi kalra/Desktop/5th semester projects/Minor1/minor/blockstudio/App/minor-grp51/node_modules/ipfs-http-client/cjs/src/dht/find-provs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\n\nconst createFindProvs = configure.configure(api => {\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Provider && message.Responses) {\n        for (const {ID, Addrs} of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});\n\nexports.createFindProvs = createFindProvs;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACjE,IAAIG,aAAa,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAElD,MAAMI,eAAe,GAAGH,SAAS,CAACA,SAAS,CAACI,GAAG,IAAI;EACjD,SAAgBC,SAASA,CAACC,GAAG;IAAA;MAAA,IAAEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAAA,0BAAE;QAC3C,MAAMG,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,eAAe,EAAE;UAC1CC,MAAM,EAAEN,OAAO,CAACM,MAAM;UACtBC,YAAY,EAAEb,iBAAiB,CAACA,iBAAiB,CAAC;YAChDc,GAAG,EAAET,GAAG,CAACU,QAAQ,CAAC,CAAC;YACnB,GAAGT;UACL,CAAC,CAAC;UACFU,OAAO,EAAEV,OAAO,CAACU;QACnB,CAAC,CAAC;QACF,WAAW,MAAMC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;UACxC,IAAID,OAAO,CAACE,IAAI,KAAKlB,aAAa,CAACmB,QAAQ,IAAIH,OAAO,CAACI,SAAS,EAAE;YAChE,KAAK,MAAM;cAACC,EAAE;cAAEC;YAAK,CAAC,IAAIN,OAAO,CAACI,SAAS,EAAE;cAC3C,MAAM;gBACJG,EAAE,EAAEF,EAAE;gBACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEG,GAAG,CAACC,CAAC,IAAI,IAAI9B,SAAS,CAAC+B,SAAS,CAACD,CAAC,CAAC;cAC1D,CAAC;YACH;UACF;QACF;MACF,CAAC;IAAA,SAAAE,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EACD,OAAOzB,SAAS;AAClB,CAAC,CAAC;AAEFT,OAAO,CAACO,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}