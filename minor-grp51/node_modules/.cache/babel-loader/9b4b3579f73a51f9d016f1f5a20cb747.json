{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst abi_coder_1 = require(\"ethers/utils/abi-coder\");\nconst lodash_1 = __importDefault(require(\"lodash\"));\nexports.QuorumDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // duck punch some of web3's output formatters\n      overrides.getBlock(web3);\n      overrides.getTransaction(web3);\n      overrides.getTransactionReceipt(web3);\n      overrides.decodeParameters(web3);\n    });\n  }\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  \"getBlock\": web3 => {\n    // @ts-ignore\n    const _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getBlock.method.outputFormatter = block => {\n      const _oldTimestamp = block.timestamp;\n      const _oldGasLimit = block.gasLimit;\n      const _oldGasUsed = block.gasUsed;\n      // Quorum uses nanoseconds instead of seconds in timestamp\n      let timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);\n      timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));\n      block.timestamp = \"0x\" + timestamp.toString(16);\n      // Since we're overwriting the gasLimit/Used later,\n      // it doesn't matter what it is before the call\n      // The same applies to the timestamp, but I reduced\n      // the precision since there was an accurate representation\n      // We do this because Quorum can have large block/transaction\n      // gas limits\n      block.gasLimit = \"0x0\";\n      block.gasUsed = \"0x0\";\n      // @ts-ignore\n      let result = _oldBlockFormatter.call(web3.eth.getBlock.method, block);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.timestamp = _oldTimestamp;\n      result.gasLimit = _oldGasLimit;\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  \"getTransaction\": web3 => {\n    const _oldTransactionFormatter =\n    // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter = tx => {\n      const _oldGas = tx.gas;\n      tx.gas = \"0x0\";\n      let result = _oldTransactionFormatter.call(\n      // @ts-ignore\n      web3.eth.getTransaction.method, tx);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.gas = _oldGas;\n      return result;\n    };\n  },\n  \"getTransactionReceipt\": web3 => {\n    const _oldTransactionReceiptFormatter =\n    // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter;\n    // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n      const _oldGasUsed = receipt.gasUsed;\n      receipt.gasUsed = \"0x0\";\n      let result = _oldTransactionReceiptFormatter.call(\n      // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt);\n      // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  // The primary difference between this decodeParameters function and web3's\n  // is that the 'Out of Gas?' zero/null bytes guard has been removed and any\n  // falsy bytes are interpreted as a zero value.\n  \"decodeParameters\": web3 => {\n    const _oldDecodeParameters = web3.eth.abi.decodeParameters;\n    const ethersAbiCoder = new abi_coder_1.AbiCoder((type, value) => {\n      if (type.match(/^u?int/) && !lodash_1.default.isArray(value) && (!lodash_1.default.isObject(value) || value.constructor.name !== \"BN\")) {\n        return value.toString();\n      }\n      return value;\n    });\n    // result method\n    function Result() {}\n    web3.eth.abi.decodeParameters = (outputs, bytes) => {\n      // if bytes is falsy, we'll pass 64 '0' bits to the ethers.js decoder.\n      // the decoder will decode the 64 '0' bits as a 0 value.\n      if (!bytes) bytes = \"0\".repeat(64);\n      const res = ethersAbiCoder.decode(\n      //@ts-ignore 'mapTypes' not existing on type 'ABI'\n      web3.eth.abi.mapTypes(outputs), `0x${bytes.replace(/0x/i, \"\")}`);\n      //@ts-ignore complaint regarding Result method\n      const returnValue = new Result();\n      returnValue.__length__ = 0;\n      outputs.forEach((output, i) => {\n        let decodedValue = res[returnValue.__length__];\n        decodedValue = decodedValue === \"0x\" ? null : decodedValue;\n        returnValue[i] = decodedValue;\n        // @ts-ignore object not having name key\n        if (lodash_1.default.isObject(output) && output.name) {\n          // @ts-ignore object not having name key\n          returnValue[output.name] = decodedValue;\n        }\n        returnValue.__length__++;\n      });\n      return returnValue;\n    };\n  }\n};","map":{"version":3,"names":["bn_js_1","__importDefault","require","abi_coder_1","lodash_1","exports","QuorumDefinition","initNetworkType","web3","overrides","getBlock","getTransaction","getTransactionReceipt","decodeParameters","_oldBlockFormatter","eth","method","outputFormatter","block","_oldTimestamp","timestamp","_oldGasLimit","gasLimit","_oldGasUsed","gasUsed","default","slice","div","pow","toString","result","call","_oldTransactionFormatter","tx","_oldGas","gas","_oldTransactionReceiptFormatter","receipt","_oldDecodeParameters","abi","ethersAbiCoder","AbiCoder","type","value","match","isArray","isObject","constructor","name","Result","outputs","bytes","repeat","res","decode","mapTypes","replace","returnValue","__length__","forEach","output","i","decodedValue"],"sources":["../lib/quorum-overloads.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}