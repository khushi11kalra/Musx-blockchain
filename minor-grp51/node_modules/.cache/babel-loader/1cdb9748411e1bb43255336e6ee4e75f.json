{"ast":null,"code":"var pkgVersion = require(\"./package.json\").version;\nvar Ajv = require(\"ajv\");\nvar util = require(\"util\");\nvar contractObjectSchema = require(\"./spec/contract-object.spec.json\");\nvar networkObjectSchema = require(\"./spec/network-object.spec.json\");\nvar abiSchema = require(\"./spec/abi.spec.json\");\n\n/**\n * Property definitions for Contract Objects\n *\n * Describes canonical output properties as sourced from some \"dirty\" input\n * object. Describes normalization process to account for deprecated and/or\n * nonstandard keys and values.\n *\n * Maps (key -> property) where:\n *  - `key` is the top-level output key matching up with those in the schema\n *  - `property` is an object with optional values:\n *      - `sources`: list of sources (see below); default `key`\n *      - `transform`: function(value) -> transformed value; default x -> x\n *\n * Each source represents a means to select a value from dirty object.\n * Allows:\n *  - dot-separated (`.`) string, corresponding to path to value in dirty\n *    object\n *  - function(dirtyObj) -> (cleanValue | undefined)\n *\n * The optional `transform` parameter standardizes value regardless of source,\n * for purposes of ensuring data type and/or string schemas.\n */\n\n// helper that ensures abi's do not contain function signatures\nconst sanitizedValue = dirtyValueArray => {\n  let sanitizedValueArray = [];\n  dirtyValueArray.forEach(item => {\n    let sanitizedItem = Object.assign({}, item);\n    delete sanitizedItem.signature;\n    sanitizedValueArray.push(sanitizedItem);\n  });\n  return sanitizedValueArray;\n};\n\n// filter `signature` property from an event\nconst sanitizeEvent = dirtyEvent => Object.entries(dirtyEvent).reduce((acc, _ref) => {\n  let [property, value] = _ref;\n  return property === \"signature\" ? acc : Object.assign(acc, {\n    [property]: value\n  });\n}, {});\n\n// sanitize aggregrate events given a `network-object.spec.json#events` object\nconst sanitizeAllEvents = dirtyEvents => Object.entries(dirtyEvents).reduce((acc, _ref2) => {\n  let [property, event] = _ref2;\n  return Object.assign(acc, {\n    [property]: sanitizeEvent(event)\n  });\n}, {});\nvar properties = {\n  contractName: {\n    sources: [\"contractName\", \"contract_name\"]\n  },\n  abi: {\n    sources: [\"abi\", \"interface\"],\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          value = JSON.parse(value);\n        } catch (_) {\n          value = undefined;\n        }\n      }\n      if (Array.isArray(value)) {\n        return sanitizedValue(value);\n      }\n      return value;\n    }\n  },\n  metadata: {\n    sources: [\"metadata\"]\n  },\n  bytecode: {\n    sources: [\"bytecode\", \"binary\", \"unlinked_binary\", \"evm.bytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  deployedBytecode: {\n    sources: [\"deployedBytecode\", \"runtimeBytecode\", \"evm.deployedBytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  immutableReferences: {},\n  generatedSources: {},\n  deployedGeneratedSources: {},\n  sourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"sourceMap\", \"srcmap\", \"evm.bytecode.sourceMap\"]\n  },\n  deployedSourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"deployedSourceMap\", \"srcmapRuntime\", \"evm.deployedBytecode.sourceMap\"]\n  },\n  source: {},\n  sourcePath: {},\n  ast: {},\n  legacyAST: {},\n  compiler: {},\n  networks: {\n    /**\n     * Normalize a networks object. Currently this makes sure `events` are\n     * always sanitized and `links` is extracted when copying from\n     * a TruffleContract context object.\n     *\n     * @param {object} value - the target object\n     * @param {object | TruffleContract} obj - the context, or source object.\n     * @return {object} The normalized Network object\n     */\n    transform: function () {\n      let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let obj = arguments.length > 1 ? arguments[1] : undefined;\n      // Sanitize value's events for known networks\n      Object.keys(value).forEach(networkId => {\n        if (value[networkId].events) {\n          value[networkId].events = sanitizeAllEvents(value[networkId].events);\n        }\n      });\n\n      // Set and sanitize the current networks property from the\n      // TruffleContract. Note: obj is a TruffleContract if it has\n      // `network_id` attribute\n      const networkId = obj.network_id;\n      if (networkId && value.hasOwnProperty(networkId)) {\n        value[networkId].links = obj.links;\n        value[networkId].events = sanitizeAllEvents(obj.events);\n      }\n      return value;\n    }\n  },\n  schemaVersion: {\n    sources: [\"schemaVersion\", \"schema_version\"]\n  },\n  updatedAt: {\n    sources: [\"updatedAt\", \"updated_at\"],\n    transform: function (value) {\n      if (typeof value === \"number\") {\n        value = new Date(value).toISOString();\n      }\n      return value;\n    }\n  },\n  networkType: {},\n  devdoc: {},\n  userdoc: {},\n  db: {}\n};\n\n/**\n * Construct a getter for a given key, possibly applying some post-retrieve\n * transformation on the resulting value.\n *\n * @return {Function} Accepting dirty object and returning value || undefined\n */\nfunction getter(key, transform) {\n  if (transform === undefined) {\n    transform = function (x) {\n      return x;\n    };\n  }\n  return function (obj) {\n    try {\n      return transform(obj[key]);\n    } catch (_) {\n      return undefined;\n    }\n  };\n}\n\n/**\n * Chains together a series of function(obj) -> value, passing resulting\n * returned value to next function in chain.\n *\n * Accepts any number of functions passed as arguments\n * @return {Function} Accepting initial object, returning end-of-chain value\n *\n * Assumes all intermediary values to be objects, with well-formed sequence\n * of operations.\n */\nfunction chain() {\n  var getters = Array.prototype.slice.call(arguments);\n  return function (obj) {\n    return getters.reduce(function (cur, get) {\n      return get(cur);\n    }, obj);\n  };\n}\n\n// Schema module\n//\n\nvar TruffleContractSchema = {\n  // Return a promise to validate a contract object\n  // - Resolves as validated `contractObj`\n  // - Rejects with list of errors from schema validator\n  validate: function (contractObj) {\n    var ajv = new Ajv({\n      verbose: true\n    });\n    ajv.addSchema(abiSchema);\n    ajv.addSchema(networkObjectSchema);\n    ajv.addSchema(contractObjectSchema);\n    if (ajv.validate(\"contract-object.spec.json\", contractObj)) {\n      return contractObj;\n    } else {\n      const message = `Schema validation failed. Errors:\\n\\n${ajv.errors.map(_ref3 => {\n        let {\n          keyword,\n          dataPath,\n          schemaPath,\n          params,\n          message,\n          data,\n          parentSchema\n        } = _ref3;\n        return util.format(\"%s (%s):\\n%s\\n\", message, keyword, util.inspect({\n          dataPath,\n          schemaPath,\n          params,\n          data,\n          parentSchema\n        }, {\n          depth: 5\n        }));\n      }).join(\"\\n\")}`;\n      const error = new Error(message);\n      error.errors = ajv.errors;\n      throw error;\n    }\n  },\n  // accepts as argument anything that can be turned into a contract object\n  // returns a contract object\n  normalize: function (objDirty, options) {\n    options = options || {};\n    var normalized = {};\n\n    // iterate over each property\n    Object.keys(properties).forEach(function (key) {\n      var property = properties[key];\n      var value; // normalized value || undefined\n\n      // either used the defined sources or assume the key will only ever be\n      // listed as its canonical name (itself)\n      var sources = property.sources || [key];\n\n      // iterate over sources until value is defined or end of list met\n      for (var i = 0; value === undefined && i < sources.length; i++) {\n        var source = sources[i];\n        // string refers to path to value in objDirty, split and chain\n        // getters\n        if (typeof source === \"string\") {\n          var traversals = source.split(\".\").map(function (k) {\n            return getter(k);\n          });\n          source = chain.apply(null, traversals);\n        }\n\n        // source should be a function that takes the objDirty and returns\n        // value or undefined\n        value = source(objDirty);\n      }\n\n      // run source-agnostic transform on value\n      // (e.g. make sure bytecode begins 0x)\n      if (property.transform) {\n        value = property.transform(value, objDirty);\n      }\n\n      // add resulting (possibly undefined) to normalized obj\n      normalized[key] = value;\n    });\n\n    // Copy x- options\n    Object.keys(objDirty).forEach(function (key) {\n      if (key.indexOf(\"x-\") === 0) {\n        normalized[key] = getter(key)(objDirty);\n      }\n    });\n\n    // update schema version\n    normalized.schemaVersion = pkgVersion;\n    if (options.validate) {\n      this.validate(normalized);\n    }\n    return normalized;\n  }\n};\nmodule.exports = TruffleContractSchema;","map":{"version":3,"names":["pkgVersion","require","version","Ajv","util","contractObjectSchema","networkObjectSchema","abiSchema","sanitizedValue","dirtyValueArray","sanitizedValueArray","forEach","item","sanitizedItem","Object","assign","signature","push","sanitizeEvent","dirtyEvent","entries","reduce","acc","_ref","property","value","sanitizeAllEvents","dirtyEvents","_ref2","event","properties","contractName","sources","abi","transform","JSON","parse","_","undefined","Array","isArray","metadata","bytecode","indexOf","deployedBytecode","immutableReferences","generatedSources","deployedGeneratedSources","sourceMap","deployedSourceMap","source","sourcePath","ast","legacyAST","compiler","networks","arguments","length","obj","keys","networkId","events","network_id","hasOwnProperty","links","schemaVersion","updatedAt","Date","toISOString","networkType","devdoc","userdoc","db","getter","key","x","chain","getters","prototype","slice","call","cur","get","TruffleContractSchema","validate","contractObj","ajv","verbose","addSchema","message","errors","map","_ref3","keyword","dataPath","schemaPath","params","data","parentSchema","format","inspect","depth","join","error","Error","normalize","objDirty","options","normalized","i","traversals","split","k","apply","module","exports"],"sources":["C:/Users/khushi kalra/Desktop/5th semester projects/Minor1/minor/blockstudio/App/minor-grp51/node_modules/@truffle/contract-schema/index.js"],"sourcesContent":["var pkgVersion = require(\"./package.json\").version;\nvar Ajv = require(\"ajv\");\nvar util = require(\"util\");\n\nvar contractObjectSchema = require(\"./spec/contract-object.spec.json\");\nvar networkObjectSchema = require(\"./spec/network-object.spec.json\");\nvar abiSchema = require(\"./spec/abi.spec.json\");\n\n/**\n * Property definitions for Contract Objects\n *\n * Describes canonical output properties as sourced from some \"dirty\" input\n * object. Describes normalization process to account for deprecated and/or\n * nonstandard keys and values.\n *\n * Maps (key -> property) where:\n *  - `key` is the top-level output key matching up with those in the schema\n *  - `property` is an object with optional values:\n *      - `sources`: list of sources (see below); default `key`\n *      - `transform`: function(value) -> transformed value; default x -> x\n *\n * Each source represents a means to select a value from dirty object.\n * Allows:\n *  - dot-separated (`.`) string, corresponding to path to value in dirty\n *    object\n *  - function(dirtyObj) -> (cleanValue | undefined)\n *\n * The optional `transform` parameter standardizes value regardless of source,\n * for purposes of ensuring data type and/or string schemas.\n */\n\n// helper that ensures abi's do not contain function signatures\nconst sanitizedValue = dirtyValueArray => {\n  let sanitizedValueArray = [];\n  dirtyValueArray.forEach(item => {\n    let sanitizedItem = Object.assign({}, item);\n    delete sanitizedItem.signature;\n    sanitizedValueArray.push(sanitizedItem);\n  });\n  return sanitizedValueArray;\n};\n\n// filter `signature` property from an event\nconst sanitizeEvent = dirtyEvent =>\n  Object.entries(dirtyEvent).reduce(\n    (acc, [property, value]) =>\n      property === \"signature\"\n        ? acc\n        : Object.assign(acc, { [property]: value }),\n    {}\n  );\n\n// sanitize aggregrate events given a `network-object.spec.json#events` object\nconst sanitizeAllEvents = dirtyEvents =>\n  Object.entries(dirtyEvents).reduce(\n    (acc, [property, event]) =>\n      Object.assign(acc, { [property]: sanitizeEvent(event) }),\n    {}\n  );\n\nvar properties = {\n  contractName: {\n    sources: [\"contractName\", \"contract_name\"]\n  },\n  abi: {\n    sources: [\"abi\", \"interface\"],\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          value = JSON.parse(value);\n        } catch (_) {\n          value = undefined;\n        }\n      }\n      if (Array.isArray(value)) {\n        return sanitizedValue(value);\n      }\n      return value;\n    }\n  },\n  metadata: {\n    sources: [\"metadata\"]\n  },\n  bytecode: {\n    sources: [\"bytecode\", \"binary\", \"unlinked_binary\", \"evm.bytecode.object\"],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  deployedBytecode: {\n    sources: [\n      \"deployedBytecode\",\n      \"runtimeBytecode\",\n      \"evm.deployedBytecode.object\"\n    ],\n    transform: function (value) {\n      if (value && value.indexOf(\"0x\") !== 0) {\n        value = \"0x\" + value;\n      }\n      return value;\n    }\n  },\n  immutableReferences: {},\n  generatedSources: {},\n  deployedGeneratedSources: {},\n  sourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\"sourceMap\", \"srcmap\", \"evm.bytecode.sourceMap\"]\n  },\n  deployedSourceMap: {\n    transform: function (value) {\n      if (typeof value === \"string\") {\n        try {\n          return JSON.parse(value);\n        } catch (_) {\n          return value;\n        }\n      } else {\n        return value;\n      }\n    },\n    sources: [\n      \"deployedSourceMap\",\n      \"srcmapRuntime\",\n      \"evm.deployedBytecode.sourceMap\"\n    ]\n  },\n  source: {},\n  sourcePath: {},\n  ast: {},\n  legacyAST: {},\n  compiler: {},\n  networks: {\n    /**\n     * Normalize a networks object. Currently this makes sure `events` are\n     * always sanitized and `links` is extracted when copying from\n     * a TruffleContract context object.\n     *\n     * @param {object} value - the target object\n     * @param {object | TruffleContract} obj - the context, or source object.\n     * @return {object} The normalized Network object\n     */\n    transform: function (value = {}, obj) {\n      // Sanitize value's events for known networks\n      Object.keys(value).forEach(networkId => {\n        if (value[networkId].events) {\n          value[networkId].events = sanitizeAllEvents(value[networkId].events);\n        }\n      });\n\n      // Set and sanitize the current networks property from the\n      // TruffleContract. Note: obj is a TruffleContract if it has\n      // `network_id` attribute\n      const networkId = obj.network_id;\n      if (networkId && value.hasOwnProperty(networkId)) {\n        value[networkId].links = obj.links;\n        value[networkId].events = sanitizeAllEvents(obj.events);\n      }\n\n      return value;\n    }\n  },\n  schemaVersion: {\n    sources: [\"schemaVersion\", \"schema_version\"]\n  },\n  updatedAt: {\n    sources: [\"updatedAt\", \"updated_at\"],\n    transform: function (value) {\n      if (typeof value === \"number\") {\n        value = new Date(value).toISOString();\n      }\n      return value;\n    }\n  },\n  networkType: {},\n  devdoc: {},\n  userdoc: {},\n  db: {}\n};\n\n/**\n * Construct a getter for a given key, possibly applying some post-retrieve\n * transformation on the resulting value.\n *\n * @return {Function} Accepting dirty object and returning value || undefined\n */\nfunction getter(key, transform) {\n  if (transform === undefined) {\n    transform = function (x) {\n      return x;\n    };\n  }\n\n  return function (obj) {\n    try {\n      return transform(obj[key]);\n    } catch (_) {\n      return undefined;\n    }\n  };\n}\n\n/**\n * Chains together a series of function(obj) -> value, passing resulting\n * returned value to next function in chain.\n *\n * Accepts any number of functions passed as arguments\n * @return {Function} Accepting initial object, returning end-of-chain value\n *\n * Assumes all intermediary values to be objects, with well-formed sequence\n * of operations.\n */\nfunction chain() {\n  var getters = Array.prototype.slice.call(arguments);\n  return function (obj) {\n    return getters.reduce(function (cur, get) {\n      return get(cur);\n    }, obj);\n  };\n}\n\n// Schema module\n//\n\nvar TruffleContractSchema = {\n  // Return a promise to validate a contract object\n  // - Resolves as validated `contractObj`\n  // - Rejects with list of errors from schema validator\n  validate: function (contractObj) {\n    var ajv = new Ajv({ verbose: true });\n    ajv.addSchema(abiSchema);\n    ajv.addSchema(networkObjectSchema);\n    ajv.addSchema(contractObjectSchema);\n    if (ajv.validate(\"contract-object.spec.json\", contractObj)) {\n      return contractObj;\n    } else {\n      const message = `Schema validation failed. Errors:\\n\\n${ajv.errors\n        .map(\n          ({\n            keyword,\n            dataPath,\n            schemaPath,\n            params,\n            message,\n            data,\n            parentSchema\n          }) =>\n            util.format(\n              \"%s (%s):\\n%s\\n\",\n              message,\n              keyword,\n              util.inspect(\n                {\n                  dataPath,\n                  schemaPath,\n                  params,\n                  data,\n                  parentSchema\n                },\n                { depth: 5 }\n              )\n            )\n        )\n        .join(\"\\n\")}`;\n      const error = new Error(message);\n      error.errors = ajv.errors;\n      throw error;\n    }\n  },\n\n  // accepts as argument anything that can be turned into a contract object\n  // returns a contract object\n  normalize: function (objDirty, options) {\n    options = options || {};\n    var normalized = {};\n\n    // iterate over each property\n    Object.keys(properties).forEach(function (key) {\n      var property = properties[key];\n      var value; // normalized value || undefined\n\n      // either used the defined sources or assume the key will only ever be\n      // listed as its canonical name (itself)\n      var sources = property.sources || [key];\n\n      // iterate over sources until value is defined or end of list met\n      for (var i = 0; value === undefined && i < sources.length; i++) {\n        var source = sources[i];\n        // string refers to path to value in objDirty, split and chain\n        // getters\n        if (typeof source === \"string\") {\n          var traversals = source.split(\".\").map(function (k) {\n            return getter(k);\n          });\n          source = chain.apply(null, traversals);\n        }\n\n        // source should be a function that takes the objDirty and returns\n        // value or undefined\n        value = source(objDirty);\n      }\n\n      // run source-agnostic transform on value\n      // (e.g. make sure bytecode begins 0x)\n      if (property.transform) {\n        value = property.transform(value, objDirty);\n      }\n\n      // add resulting (possibly undefined) to normalized obj\n      normalized[key] = value;\n    });\n\n    // Copy x- options\n    Object.keys(objDirty).forEach(function (key) {\n      if (key.indexOf(\"x-\") === 0) {\n        normalized[key] = getter(key)(objDirty);\n      }\n    });\n\n    // update schema version\n    normalized.schemaVersion = pkgVersion;\n\n    if (options.validate) {\n      this.validate(normalized);\n    }\n\n    return normalized;\n  }\n};\n\nmodule.exports = TruffleContractSchema;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}